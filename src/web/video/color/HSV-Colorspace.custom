/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
video_color_HSV_Colorspace = video_color_HSV_Colorspace.extend({

    init: function(attr, setter, getter){
        this._super(attr, setter, getter);
        this.worker= null;
        this.tmpCanvas = null;
        this.tmpContext = null;
        this.processing = false;
        this.getInputPort("input_port1").setSemanticGroup("Image");
        this.getOutputPort("output_port1").setSemanticGroup("Image");
        this.attr({
            resizeable:false
        });
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        var img = this.getInputPort("input_port1").getValue();
        if(img instanceof HTMLImageElement && this.worker!==null && this.processing === false){
            var imageData = this.imageToData(img);
            // Push it to the WebWorker with "Transferable Objects"
            // Passing data by reference instead of structure clone
            //
            this.processing = true;
            var hue = this.getInputPort("input_port2").getValue();
            this.worker.postMessage( {imageData, hue}, [imageData.data.buffer]);
        }
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
        // the method which runs as WebWorker
        //
        var workerFunction = function(event){
            var imageData = event.data.imageData;
            var hue = event.data.hue;
            
            // mapping of [0..5] => [0..359]
            hue = 359/5*hue;
            
            var pixels = imageData.data;
            var nPixels = pixels.length,
              v = 2, // Math.pow(2, this.value()),
              s = 1.5, // Math.pow(2, this.saturation()),
              h = Math.abs(hue + 360) % 360,
              i;

            // Precompute the values in the matrix:
            var vsu = v * s * Math.cos((h * Math.PI) / 180),
                vsw = v * s * Math.sin((h * Math.PI) / 180);
            // (result spot)(source spot)
            var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw,
                rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw,
                rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
            var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw,
                gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw,
                gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
            var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw,
                bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw,
                bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;

            var r, g, b, a;

            for (i = 0; i < nPixels; i += 4) {
              r = pixels[i + 0];
              g = pixels[i + 1];
              b = pixels[i + 2];
              a = pixels[i + 3];

              pixels[i + 0] = rr * r + rg * g + rb * b;
              pixels[i + 1] = gr * r + gg * g + gb * b;
              pixels[i + 2] = br * r + bg * g + bb * b;
              pixels[i + 3] = a; // alpha
            }
            self.postMessage(imageData, [imageData.data.buffer]);
        };
        
        // the method which receives the WebWorker result
        //
       var receiverFunction = (event) => {
            this.processing = false;
            var imageData = event.data;
            this.tmpContext.putImageData(imageData,0,0);
            var image = new Image();
            image.onload = () => {
                this.getOutputPort("output_port1").setValue(image);
            }
            image.src = this.tmpCanvas.toDataURL();
        };
        
        // convert a js function to a WebWorker
        //
        this.worker = this.createWorker(workerFunction);
        this.worker.onmessage = receiverFunction
        this.processing = false;
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
        if(this.worker) this.worker.terminate();
        delete this.worker;
        delete this.tmpContext;
        delete this.tmpCanvas;
        this.worker = null;
        this.tmpCanvas = null;
        this.tmpContext = null;
        this.processing = false;
    },
    

    /**
     *  Helper function to dynamically create Web Workers.
     */
    createWorker: function(fn) {
        var blob = new Blob(["self.onmessage = ", fn.toString()], {
           type: "text/javascript"
        });
        var url = window.URL.createObjectURL(blob);
        return new Worker(url);
    },
    
    imageToData: function(image){
        var width = image.naturalWidth;
        var height= image.naturalHeight;

        if(this.tmpContext !==null && this.tmpContext.width!== width){
            delete this.tmpContext;
            delete this.tmpCanvas;
            this.tmpCanvas = null;
            this.tmpContext = null;
        }

        // convert the HTMLImageElement to an ImageData object. Required for the WebWorker
        //
        if(this.tmpContext === null ) {
            this.tmpCanvas = document.createElement('canvas');
            this.tmpCanvas.width = width;
            this.tmpCanvas.height = height;
            this.tmpContext = this.tmpCanvas.getContext('2d');
        }
        this.tmpContext.drawImage(image, 0, 0, width, height);
        return this.tmpContext.getImageData(0, 0, width, height);
    }
});