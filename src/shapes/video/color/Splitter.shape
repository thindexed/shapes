{
  "draw2d": [
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "e92ac7a1-d149-90c6-1281-23d32bf22f9d",
      "x": 7960,
      "y": 7957.966699716795,
      "width": 80,
      "height": 80,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle",
        "baseClass": "draw2d.SetFigure",
        "code": "/**\n * Generated Code for the Draw2D touch HTML5 lib.\n * File will be generated if you save the *.shape file.\n *\n * by 'Draw2D Shape Designer'\n *\n * Custom JS code to tweak the standard behaviour of the generated\n * shape. add your custom code and event handler here.\n *\n * Looks disconcerting - extending my own class. But this is a good method to\n * merge basic code and override them with custom methods.\n */\ntestShape = testShape.extend({\n\n    init: function(attr, setter, getter){\n        this._super(attr, setter, getter);\n        this.worker= null;\n        this.tmpCanvas = null;\n        this.tmpContext = null;\n        this.tmpCanvasR = null;\n        this.tmpContextR = null;\n        this.tmpCanvasG = null;\n        this.tmpContextG = null;\n        this.tmpCanvasB = null;\n        this.tmpContextB = null;\n        this.processing = false;\n        this.getInputPort(\"input_port1\").setSemanticGroup(\"Image\");\n        this.getOutputPort(\"output_port1\").setSemanticGroup(\"Image\");\n        this.getOutputPort(\"output_port2\").setSemanticGroup(\"Image\");\n        this.getOutputPort(\"output_port3\").setSemanticGroup(\"Image\");\n        this.attr({\n            resizeable:false\n        });\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n    },\n\n    /**\n     *  Called by the simulator for every calculation\n     *  loop\n     *  @param {Object} context context where objects can store or handover global variables to other objects.\n     *  @required\n     **/\n    calculate:function( context)\n    {\n        var img = this.getInputPort(\"input_port1\").getValue();\n        var threshold = this.getInputPort(\"input_port2\").getValue();\n        if(img instanceof HTMLImageElement && this.worker!==null && this.processing === false){\n            var imageData = this.imageToData(img);\n            // Push it to the WebWorker with \"Transferable Objects\"\n            // Passing data by reference instead of structure clone\n            //\n            this.processing = true;\n            this.worker.postMessage({imageData: imageData,threshold: threshold}, [imageData.data.buffer]);\n        }\n    },\n\n\n    /**\n     *  Called if the simulation mode is starting\n     *  @required\n     **/\n    onStart:function( context )\n    {\n        // the method which runs as WebWorker\n        //\n        var workerFunction = function(event){\n            var imageData = event.data.imageData;\n            var threshold = event.data.threshold;\n            // map offset from 0-5 => 0-255\n            threshold = 255/5*threshold;\n            var pixels = imageData.data;\n            var w = imageData.width;\n            var h = imageData.height;\n            \n            var r = new Uint8ClampedArray(pixels.length);\n            var g = new Uint8ClampedArray(pixels.length);\n            var b = new Uint8ClampedArray(pixels.length);\n            r.fill(255);\n            g.fill(255);\n            b.fill(255);\n            \n            for( let x = 0; x < pixels.length; x += 4 ) {\n                r[x]=r[x+1]=r[x+2] = threshold < (pixels[x]  -((pixels[x+1]+pixels[x+2])/2))?0:255;\n                g[x]=g[x+1]=g[x+2] = threshold < (pixels[x+1]-((pixels[x]  +pixels[x+2])/2))?0:255;\n                b[x]=b[x+1]=b[x+2] = threshold < (pixels[x+2]-((pixels[x+1]+pixels[x])/2))?0:255;\n            }\n            var imageDataR = new ImageData(r, w, h);\n            var imageDataG = new ImageData(g, w, h);\n            var imageDataB = new ImageData(b, w, h);\n            self.postMessage({imageDataR, imageDataG, imageDataB}, [imageDataR.data.buffer,imageDataG.data.buffer,imageDataB.data.buffer]);\n        };\n        \n        // the method which receives the WebWorker result\n        //\n       var receiverFunction = (event) => {\n            var imageDataR = event.data.imageDataR;\n            var imageDataG = event.data.imageDataG;\n            var imageDataB = event.data.imageDataB;\n            this.tmpContextR.putImageData(imageDataR,0,0);\n            this.tmpContextG.putImageData(imageDataG,0,0);\n            this.tmpContextB.putImageData(imageDataB,0,0);\n            \n            var imageR = new Image();\n            imageR.onload = () => {\n                this.getOutputPort(\"output_port1\").setValue(imageR);\n                this.processing = false;\n            };\n            imageR.src = this.tmpCanvasR.toDataURL();\n            \n            var imageG = new Image();\n            imageG.onload = () => {\n                this.getOutputPort(\"output_port2\").setValue(imageG);\n                this.processing = false;\n            };\n            imageG.src = this.tmpCanvasG.toDataURL();\n            \n            var imageB = new Image();\n            imageB.onload = () => {\n                this.getOutputPort(\"output_port3\").setValue(imageB);\n                this.processing = false;\n            };\n            imageB.src = this.tmpCanvasB.toDataURL();\n        };\n        \n        // convert a js function to a WebWorker\n        //\n        this.worker = this.createWorker(workerFunction);\n        this.worker.onmessage = receiverFunction;\n        this.processing = false;\n    },\n\n    /**\n     *  Called if the simulation mode is stopping\n     *  @required\n     **/\n    onStop:function( context )\n    {\n        if(this.worker) this.worker.terminate();\n        delete this.worker;\n        delete this.tmpContext;\n        delete this.tmpCanvas;\n        delete this.tmpContextR;\n        delete this.tmpCanvasR;\n        delete this.tmpContextG;\n        delete this.tmpCanvasG;\n        delete this.tmpContextB;\n        delete this.tmpCanvasB;\n        this.worker = null;\n        this.tmpCanvas = null;\n        this.tmpContext = null;\n        this.tmpCanvasR = null;\n        this.tmpContextR = null;\n        this.tmpCanvasG = null;\n        this.tmpContextG = null;\n        this.tmpCanvasB = null;\n        this.tmpContextB = null;\n        this.progressing = false;\n    },\n    \n\n    /**\n     *  Helper function to dynamically create Web Workers.\n     */\n    createWorker: function(fn) {\n        var blob = new Blob([\"self.onmessage = \", fn.toString()], {\n           type: \"text/javascript\"\n        });\n        var url = window.URL.createObjectURL(blob);\n        return new Worker(url);\n    },\n    \n    imageToData: function(image){\n        var width = image.naturalWidth;\n        var height= image.naturalHeight;\n\n        if(this.tmpContext !==null && this.tmpContext.width!== width){\n            delete this.tmpContext;\n            delete this.tmpCanvas;\n            delete this.tmpContextR;\n            delete this.tmpCanvasR;\n            delete this.tmpContextG;\n            delete this.tmpCanvasG;\n            delete this.tmpContextB;\n            delete this.tmpCanvasB;\n            this.tmpCanvas = null;\n            this.tmpContext = null;\n            this.tmpCanvasR = null;\n            this.tmpContextR = null;\n            this.tmpCanvasG = null;\n            this.tmpContextG = null;\n            this.tmpCanvasB = null;\n            this.tmpContextB = null;\n        }\n\n        // convert the HTMLImageElement to an ImageData object. Required for the WebWorker\n        //\n        if(this.tmpContext === null ) {\n            this.tmpCanvas = document.createElement('canvas');\n            this.tmpCanvas.width = width;\n            this.tmpCanvas.height = height;\n            this.tmpContext = this.tmpCanvas.getContext('2d');\n\n            this.tmpCanvasR = document.createElement('canvas');\n            this.tmpCanvasR.width = width;\n            this.tmpCanvasR.height = height;\n            this.tmpContextR = this.tmpCanvasR.getContext('2d');\n\n            this.tmpCanvasG = document.createElement('canvas');\n            this.tmpCanvasG.width = width;\n            this.tmpCanvasG.height = height;\n            this.tmpContextG = this.tmpCanvasG.getContext('2d');\n\n            this.tmpCanvasB = document.createElement('canvas');\n            this.tmpCanvasB.width = width;\n            this.tmpCanvasB.height = height;\n            this.tmpContextB = this.tmpCanvasB.getContext('2d');\n        }\n        this.tmpContext.drawImage(image, 0, 0, width, height);\n        return this.tmpContext.getImageData(0, 0, width, height);\n    }\n});",
        "markdown": "## Black & White Converter\n\nConverts the image to black and white pixels depending if they \nare above or below the threshold defined by the level parameter. \nThe parameter must be between 0.0 (black) and 5.0 (white). \n",
        "type": "Output",
        "direction": 1
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(255,255,255,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 3,
      "dasharray": null,
      "vertices": [
        {
          "x": 7960,
          "y": 7957.966699716795
        },
        {
          "x": 8040,
          "y": 7957.966699716795
        },
        {
          "x": 8040,
          "y": 8037.966699716795
        },
        {
          "x": 7960,
          "y": 8037.966699716795
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "4b595509-01bf-f5ab-3c2d-05cde35599eb",
      "x": 7953.5,
      "y": 8024.020229083205,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "input_port2",
        "type": "Input",
        "direction": 3,
        "fanout": 20
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "509f0f7f-9c3d-3b54-d79c-877493488fa7",
      "x": 7953.5,
      "y": 7993.454699716796,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "input_port1",
        "type": "Input",
        "direction": 3,
        "fanout": 1
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "c1ec0c94-3228-1dca-dce4-38a00def99e7",
      "x": 8036.134216704,
      "y": 8004.954699716796,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "output_port3",
        "type": "Output",
        "direction": 1,
        "fanout": 20
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "100f0e1f-d0f9-a294-c75c-686187150344",
      "x": 8036.134216704,
      "y": 7983.466223296253,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "output_port2",
        "type": "Output",
        "direction": 1,
        "fanout": 20
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPort",
      "id": "b832e06d-477d-4ffc-697b-d19504dc9aad",
      "x": 8036.134216704,
      "y": 7959.149865716798,
      "width": 10,
      "height": 10,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "output_port1",
        "type": "Output",
        "direction": 1,
        "fanout": 20
      },
      "cssClass": "shape_designer_figure_ExtPort",
      "ports": [],
      "bgColor": "rgba(55,177,222,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 1,
      "dasharray": null,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FanoutFilter"
        },
        {
          "name": "shape_designer.filter.PortDirectionFilter"
        },
        {
          "name": "shape_designer.filter.PortTypeFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.PolyRect",
      "id": "60a2dd97-1f28-c39f-3767-73fb56280eae",
      "x": 7964.5,
      "y": 7962.346667716796,
      "width": 71,
      "height": 48,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(235,235,235,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 1,
      "radius": 4,
      "dasharray": null,
      "vertices": [
        {
          "x": 7964.5,
          "y": 7962.346667716796
        },
        {
          "x": 8035.5,
          "y": 7962.346667716796
        },
        {
          "x": 8035.5,
          "y": 8010.346667716796
        },
        {
          "x": 7964.5,
          "y": 8010.346667716796
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.StrokeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtLabel",
      "id": "08ecbf02-d0c7-c225-b373-3d46a828f568",
      "x": 7962.407552000004,
      "y": 8016.095800283205,
      "width": 58.03125,
      "height": 21.375,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Label"
      },
      "cssClass": "shape_designer_figure_ExtLabel",
      "ports": [],
      "bgColor": "rgba(0,0,0,0)",
      "color": "rgba(27,27,27,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "text": "RGB Splitter",
      "outlineStroke": 0,
      "outlineColor": "rgba(0,0,0,0)",
      "fontSize": 12,
      "fontColor": "rgba(8,8,8,1)",
      "fontFamily": null,
      "editor": "LabelInplaceEditor",
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.FontSizeFilter"
        },
        {
          "name": "shape_designer.filter.FontColorFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.PolyCircle",
      "id": "f6c602d3-cc44-24dd-49a7-c0955b0e114e",
      "x": 7990.136293579453,
      "y": 7967.466223296253,
      "width": 16,
      "height": 16,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Circle"
      },
      "cssClass": "shape_designer_figure_PolyCircle",
      "ports": [],
      "bgColor": "rgba(199,29,61,1)",
      "color": "rgba(27,27,27,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPolygon",
      "id": "6eac5a02-2b2a-f16d-f87b-d71700eb0679",
      "x": 7988.136293579453,
      "y": 7988.846667716796,
      "width": 21,
      "height": 19,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(199,29,61,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7988.136293579453,
          "y": 8007.846667716796
        },
        {
          "x": 8009.136293579453,
          "y": 8007.846667716796
        },
        {
          "x": 8007.664780560579,
          "y": 7993.4567089858865
        },
        {
          "x": 8007.264814642871,
          "y": 7992.517397557916
        },
        {
          "x": 8006.611721664993,
          "y": 7991.636061498295
        },
        {
          "x": 8005.725345526596,
          "y": 7990.839479757227
        },
        {
          "x": 8004.632618318119,
          "y": 7990.15185606782
        },
        {
          "x": 8003.366742002849,
          "y": 7989.59408352792
        },
        {
          "x": 8001.966179592053,
          "y": 7989.183109773912
        },
        {
          "x": 8000.473486465869,
          "y": 7988.931422035348
        },
        {
          "x": 7998.934017349595,
          "y": 7988.846667716796
        },
        {
          "x": 7997.394548233322,
          "y": 7988.931422035348
        },
        {
          "x": 7995.901855107135,
          "y": 7989.183109773912
        },
        {
          "x": 7994.501292696339,
          "y": 7989.59408352792
        },
        {
          "x": 7993.235416381065,
          "y": 7990.15185606782
        },
        {
          "x": 7992.142689172593,
          "y": 7990.839479757227
        },
        {
          "x": 7991.256313034195,
          "y": 7991.636061498295
        },
        {
          "x": 7990.60322005632,
          "y": 7992.517397557916
        },
        {
          "x": 7990.203254138609,
          "y": 7993.4567089858865
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPolygon",
      "id": "8ba0c773-a1f9-419a-a08a-812260337f1a",
      "x": 7999.134216704,
      "y": 7994,
      "width": 36,
      "height": 16,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(0,0,255,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7999.134216704,
          "y": 8010
        },
        {
          "x": 8035.134216704,
          "y": 8010
        },
        {
          "x": 8035.134216704,
          "y": 7994
        },
        {
          "x": 7999.134216704,
          "y": 7994
        },
        {
          "x": 7999.134216704,
          "y": 8010
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPolygon",
      "id": "34a1df2a-abb1-bde1-86c3-59c8f4bc2d37",
      "x": 7999,
      "y": 7977.846667716796,
      "width": 36,
      "height": 17,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(0,255,0,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7999,
          "y": 7994.846667716796
        },
        {
          "x": 8035,
          "y": 7994.846667716796
        },
        {
          "x": 8035,
          "y": 7977.846667716796
        },
        {
          "x": 7999,
          "y": 7977.846667716796
        },
        {
          "x": 7999,
          "y": 7994.846667716796
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    },
    {
      "type": "shape_designer.figure.ExtPolygon",
      "id": "0795989b-5858-9a8a-97f7-06f0c2e2c411",
      "x": 7999,
      "y": 7962,
      "width": 36,
      "height": 17,
      "alpha": 1,
      "selectable": true,
      "draggable": true,
      "angle": 0,
      "userData": {
        "name": "Rectangle"
      },
      "cssClass": "shape_designer_figure_PolyRect",
      "ports": [],
      "bgColor": "rgba(255,0,0,1)",
      "color": "rgba(48,48,48,1)",
      "stroke": 0,
      "radius": 0,
      "dasharray": null,
      "vertices": [
        {
          "x": 7999,
          "y": 7979
        },
        {
          "x": 8035,
          "y": 7979
        },
        {
          "x": 8035,
          "y": 7962
        },
        {
          "x": 7999,
          "y": 7962
        },
        {
          "x": 7999,
          "y": 7979
        }
      ],
      "blur": 0,
      "filters": [
        {
          "name": "shape_designer.filter.PositionFilter"
        },
        {
          "name": "shape_designer.filter.SizeFilter"
        },
        {
          "name": "shape_designer.filter.FillColorFilter"
        },
        {
          "name": "shape_designer.filter.RadiusFilter"
        }
      ]
    }
  ]
}