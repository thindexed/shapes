/**
 * Generated Code for the Draw2D touch HTML5 lib.
 * File will be generated if you save the *.shape file.
 *
 * by 'Draw2D Shape Designer'
 *
 * Custom JS code to tweak the standard behaviour of the generated
 * shape. add your custom code and event handler here.
 *
 * Looks disconcerting - extending my own class. But this is a good method to
 * merge basic code and override them with custom methods.
 */
circuit_74LSXX_74LS90 = circuit_74LSXX_74LS90.extend({

    init: function(attr, setter, getter){
         this._super(attr, setter, getter);

        this.attr({resizeable:false});
        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());

        // internal the 74ls90 is build with two seperated counter
        // A Mod2 and a Mod5 counter. Cascading them is a BCD Counter (Mod10)
        //
        this.last_t1=true;
        this.last_t2=true;
        this.counter1=0; // mod 2 counter
        this.counter2=0; // mod 5 counter
    },

    /**
     *  Called by the simulator for every calculation
     *  loop
     *  @param {Object} context context where objects can store or handover global variables to other objects.
     *  @required
     **/
    calculate:function( context)
    {
        var t1 = this.getInputPort("pin_cka").getBooleanValue();
        var t2 = this.getInputPort("pin_ckb").getBooleanValue();

        var falling1 = this.last_t1===true && t1===false; 
        var falling2 = this.last_t2===true && t2===false; 
        
        if(falling1===true){
            var a = this.getOutputPort("pin_qa");
            a.setValue(!!(this.counter1 & 1));
            this.counter1= (this.counter1+1)%2;
        }
        
        if(falling2===true){
            var b = this.getOutputPort("pin_qb");
            var c = this.getOutputPort("pin_qc");
            var d = this.getOutputPort("pin_qd");
            b.setValue(!!(this.counter2 & 1));
            c.setValue(!!(this.counter2 & 2));
            d.setValue(!!(this.counter2 & 4));
            this.counter2= (this.counter2+1)%5;
        }
        this.last_t1 = t1;
        this.last_t2 = t2;
    },


    /**
     *  Called if the simulation mode is starting
     *  @required
     **/
    onStart:function( context )
    {
    },

    /**
     *  Called if the simulation mode is stopping
     *  @required
     **/
    onStop:function( context )
    {
    },

    /**
     * Get the simulator a hint which kind of hardware the shapes requires or supports
     * This helps the simulator to bring up some dialogs and messages if any new hardware is connected/get lost
     * and your are running a circuit which needs this kind of hardware...
     **/
    getRequiredHardware: function(){
      return {
        raspi: false,
        arduino: false
      }
    }

});